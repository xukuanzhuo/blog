<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端</title>
  
  <subtitle>逝者如斯夫, 不舍昼夜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xukuanzhuo.github.io/"/>
  <updated>2019-06-08T14:14:59.781Z</updated>
  <id>https://xukuanzhuo.github.io/</id>
  
  <author>
    <name>Xu KZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现Javascript中的New操作符</title>
    <link href="https://xukuanzhuo.github.io/2018/12/20/2018-12-20-Implement-New-Operator/"/>
    <id>https://xukuanzhuo.github.io/2018/12/20/2018-12-20-Implement-New-Operator/</id>
    <published>2018-12-20T13:06:26.000Z</published>
    <updated>2019-06-08T14:14:59.781Z</updated>
    
    <content type="html"><![CDATA[<h3 id="new-运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例"><a href="#new-运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例" class="headerlink" title="new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例"></a><code>new</code> 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例</h3><h3 id="new-关键字会进行如下操作"><a href="#new-关键字会进行如下操作" class="headerlink" title="new 关键字会进行如下操作:"></a><code>new</code> 关键字会进行如下操作:</h3><ul><li>创建一个空的简单JavaScript对象（即{}）；</li><li>链接该对象（即设置该对象的构造函数）到另一个对象 ；</li><li>将步骤1新创建的对象作为this的上下文 ；</li><li>如果该函数没有返回对象，则返回this。</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Car (make, model, year) &#123;</span><br><span class="line">  this.make = make</span><br><span class="line">  this.model = model</span><br><span class="line">  this.year = year</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>const myCar =  new Car(&#39;toyta&#39;, &#39;AE86&#39;, 1987)</code></p><p><img src="https://i.loli.net/2019/04/24/5cbfd0854fdae.png" alt="myCar"></p><h3 id="按照-new-关键字操作过程实现一个-newObject-函数"><a href="#按照-new-关键字操作过程实现一个-newObject-函数" class="headerlink" title="按照 new 关键字操作过程实现一个 newObject 函数"></a>按照 <code>new</code> 关键字操作过程实现一个 <code>newObject</code> 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function newObject () &#123;</span><br><span class="line">  const obj = Object.create(null)                // 创建一个空obj</span><br><span class="line">  const constructor = [].shift.apply(arguments)  // 取出第一个参数(构造器函数)</span><br><span class="line">  obj.__proto__ = constructor.prototype          // 将 obj 的原型指向构造函数</span><br><span class="line">  constructor.apply(obj, arguments)              // 更改构造函数this指向到obj</span><br><span class="line">  return obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>const myCar2 = newObject(Car, &#39;nissan&#39;, &#39;civic hatchback&#39;, 2019)</code></p><p><img src="https://i.loli.net/2019/04/24/5cbfd09a61817.png" alt="myCar2"></p><h4 id="hmmmmm-myCar和myCar2-看起来有些不一样-使用原型链的方法校验一下"><a href="#hmmmmm-myCar和myCar2-看起来有些不一样-使用原型链的方法校验一下" class="headerlink" title="hmmmmm myCar和myCar2 看起来有些不一样, 使用原型链的方法校验一下:"></a>hmmmmm <code>myCar</code>和<code>myCar2</code> 看起来有些不一样, 使用原型链的方法校验一下:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object.getPrototypeOf(myCar) === Car.prototype  // true</span><br><span class="line">myCar.__proto__ === Car.prototype               // true</span><br><span class="line">myCar instanceof Car                            // true</span><br><span class="line"></span><br><span class="line">Object.getPrototypeOf(myCar2) === Car.prototype  // false</span><br><span class="line">myCar2.__proto__ === Car.prototype               // false</span><br><span class="line">myCar2 instanceof Car                            // false</span><br></pre></td></tr></table></figure><blockquote><p><code>myCar2</code> 没有在<code>Car</code>的原型链上, 更换创建空<code>obj</code>的实现方式为:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const obj = new Object()</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>原因是 <code>Object.create(null)</code> 创建的是一个没有原型链链接的空对象，<code>new Object()</code> 类似于 <code>Object.create(Object.prototype)</code> 创建的是有原型链链接的空对象，</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = Object.create(null)</span><br><span class="line">var b = new Object()</span><br></pre></td></tr></table></figure><ul><li><code>Object.getPrototypeOf(a)  // null</code></li></ul><p><img src="https://i.loli.net/2019/04/24/5cbfc71547e67.png" alt="a"></p><p>  <code>Object.getPrototypeOf(b) === Object.prototype // false</code></p><ul><li><code>Object.getPrototypeOf(b)</code></li></ul><p><img src="https://i.loli.net/2019/04/24/5cbfc74aaeb5a.png" alt="b"></p><p>  <code>Object.getPrototypeOf(b) === Object.prototype // true</code></p><blockquote><p><code>a</code>是没有原型链链接的空对象，自然访问不到<code>__proto__</code> 属性，没有在原型链上，所以也可以用来做字典，不会有原型链上属性影响。</p></blockquote><h3 id="考虑Car函数有返回值的情况"><a href="#考虑Car函数有返回值的情况" class="headerlink" title="考虑Car函数有返回值的情况"></a>考虑<code>Car</code>函数有返回值的情况</h3><p>  我们需要<code>newObject</code>返回的是一个对象，所以对构造函数返回值进行判定</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const ret = constructor.apply(obj, arguments)</span><br><span class="line">return typeof ret === &apos;Object&apos; ? ret || obj : obj</span><br></pre></td></tr></table></figure><p>  最终版本<code>newObject</code>:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function newObject () &#123;</span><br><span class="line">  const obj = new Object()</span><br><span class="line">  const constructor = [].shift.apply(arguments)</span><br><span class="line">  obj.__proto__ = constructor.prototype</span><br><span class="line">  const ret = constructor.apply(obj, arguments)</span><br><span class="line">  return typeof ret === &apos;Object&apos; ? ret || obj : obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const car1 = new Car(&apos;toyta&apos;, &apos;AE86&apos;, 1987)</span><br><span class="line">const car2 = newObject(Car, &apos;toyta&apos;, &apos;AE86&apos;, 1987)</span><br><span class="line"></span><br><span class="line">Car.prototype.wheels = 4</span><br><span class="line"></span><br><span class="line">car1.wheels = 4                                                // true</span><br><span class="line">car2.wheels = 4                                                // true</span><br><span class="line">car1 instanceof Car                                            // true</span><br><span class="line">car2 instanceof Car                                            // true</span><br><span class="line">Object.getPrototypeOf(car1) === Object.getPrototypeOf(car2)    // true</span><br></pre></td></tr></table></figure></p><p> referrece: </p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener">MDN new operator</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md#createing-links" target="_blank" rel="noopener">You Don’t Know JS Object.create</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;new-运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例&quot;&gt;&lt;a href=&quot;#new-运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例&quot; class=&quot;headerlink&quot; title=&quot;new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例&quot;&gt;&lt;/a&gt;&lt;code&gt;new&lt;/code&gt; 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例&lt;/h3&gt;&lt;h3 id=&quot;new-关键字会进行如下操作&quot;&gt;&lt;a href=&quot;#new-关键字会进行如下操作&quot; class=&quot;headerlink&quot; title=&quot;new 关键字会进行如下操作:&quot;&gt;&lt;/a&gt;&lt;code&gt;new&lt;/code&gt; 关键字会进行如下操作:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建一个空的简单JavaScript对象（即{}）；&lt;/li&gt;
&lt;li&gt;链接该对象（即设置该对象的构造函数）到另一个对象 ；&lt;/li&gt;
&lt;li&gt;将步骤1新创建的对象作为this的上下文 ；&lt;/li&gt;
&lt;li&gt;如果该函数没有返回对象，则返回this。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://xukuanzhuo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://xukuanzhuo.github.io/tags/javascript/"/>
    
      <category term="implement javascript properties" scheme="https://xukuanzhuo.github.io/tags/implement-javascript-properties/"/>
    
  </entry>
  
  <entry>
    <title>【转】前端工程与性能优化</title>
    <link href="https://xukuanzhuo.github.io/2018/11/21/2018-11-21-Front-end-Engineering-Performance-Optimization/"/>
    <id>https://xukuanzhuo.github.io/2018/11/21/2018-11-21-Front-end-Engineering-Performance-Optimization/</id>
    <published>2018-11-21T13:06:26.000Z</published>
    <updated>2019-06-08T14:15:05.252Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每个参与过开发企业级web应用的前端工程师或许都曾思考过前端性能优化方面的问题。我们有雅虎14条性能优化原则，还有两本很经典的性能优化指导书：《高性能网站建设指南》、《高性能网站建设进阶指南》。经验丰富的工程师对于前端性能优化方法耳濡目染，基本都能一一列举出来。这些性能优化原则大概是在7年前提出的，对于web性能优化至今都有非常重要的指导意义。</p></blockquote><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/book.jpg" alt="高性能网站建设指南"></p><a id="more"></a><p>然而，对于构建大型web应用的团队来说，要坚持贯彻这些优化原则并不是一件十分容易的事。因为优化原则中很多要求是与工程管理相违背的，比如 <code>把css放在头部</code> 和 <code>把js放在尾部</code> 这两条原则，我们不能让团队的工程师在写样式和脚本引用的时候都去修改一个相同的页面文件。这样做会严重影响团队成员间并行开发的效率，尤其是在团队有版本管理的情况下，每天要花大量的时间进行代码修改合并，这项成本是难以接受的。因此在前端工程界，总会看到周期性的性能优化工作，辛勤的前端工程师们每到月圆之夜就会倾巢出动根据优化原则做一次性能优化。</p><blockquote><p>性能优化是一个工程问题</p></blockquote><p>本文将从一个全新的视角来思考web性能优化与前端工程之间的关系，揭示前端性能优化在前端架构及开发工具设计层面的实现思路。</p><h2 id="性能优化原则及分类"><a href="#性能优化原则及分类" class="headerlink" title="性能优化原则及分类"></a>性能优化原则及分类</h2><p>po主先假设本文的读者是有前端开发经验的工程师，并对企业级web应用开发及性能优化有一定的思考，因此我不会重复介绍雅虎14条性能优化原则。如果您没有这些前续知识，请移步 <a href="http://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">这里</a> 来学习。</p><p>首先，我们把雅虎14条优化原则，《高性能网站建设指南》以及《高性能网站建设进阶指南》中提到的优化点做一次梳理，按照优化方向分类，可以得到这样一张表格：</p><ul><li>优化方向    优化手段</li><li>请求数量    合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</li><li>请求带宽    开启GZip，精简JavaScript，移除重复脚本，图像优化</li><li>缓存利用    使用CDN，使用外部JavaScript和CSS，添加Expires头，</li><li>减少DNS查找，配置ETag，使AjaX可缓存</li><li>页面结构    将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</li><li>代码校验    避免CSS表达式，避免重定向</li></ul><blockquote><p>目前大多数前端团队可以利用 <a href="http://yui.github.io/yuicompressor/" target="_blank" rel="noopener">yui compressor</a> 或者 <a href="https://code.google.com/p/closure-compiler/" target="_blank" rel="noopener">google closure compiler</a> 等压缩工具很容易做到 <code>精简Javascript</code> 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 <code>图像优化</code> 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 <code>避免css表达式</code> 和 <code>避免重定向</code> 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 <code>划分主域</code> 原则。</p></blockquote><p>我们把以上这些已经成熟应用到实际生产中的优化手段去除掉，留下那些还没有很好实现的优化原则。再来回顾一下之前的性能优化分类：</p><ul><li>优化方向    优化手段</li><li>请求数量    合并脚本和样式表，拆分初始化负载</li><li>请求带宽    移除重复脚本</li><li>缓存利用    添加Expires头，配置ETag，使Ajax可缓存</li><li>页面结构    将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</li><li>有很多顶尖的前端团队可以将上述还剩下的优化原则也都一一解决，但业界大多数团队都还没能很好的解决这些问题。因此，本文将就这些原则的解决方案做进一步的分析与讲解，从而为那些还没有进入前端工业化开发的团队提供一些基础技术建设意见，也借此机会与业界顶尖的前端团队在工业化工程化方向上交流一下彼此的心得。</li></ul><h2 id="静态资源版本更新与缓存"><a href="#静态资源版本更新与缓存" class="headerlink" title="静态资源版本更新与缓存"></a>静态资源版本更新与缓存</h2><p><code>缓存利用</code> 分类中保留了 <code>添加Expires头</code> 和 <code>配置ETag</code> 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： <code>如何更新这些缓存？</code></p><p>相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：</p><blockquote><p>最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。</p></blockquote><p>思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？</p><p>先来看看现在一般前端团队的做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;a.js?t=201404231123&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;b.js?t=201404231123&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;c.js?t=201404231123&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;d.js?t=201404231123&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;e.js?t=201404231123&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。</p></blockquote><p>接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 <code>a.js</code> 这个文件，得到的构建结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;hello world&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;a.js?t=201404231826&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;b.js?t=201404231826&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;c.js?t=201404231826&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;d.js?t=201404231826&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;e.js?t=201404231826&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。</p><blockquote><p>使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。</p></blockquote><p>此外，采用添加query的方式来清除缓存还有一个弊端，就是 <code>覆盖式发布</code> 的上线问题。</p><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/deploy.png" alt="覆盖式发布"></p><p>采用query更新缓存的方式实际上要覆盖线上文件的，index.html和a.js总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？</p><ol><li>如果先覆盖index.html，后覆盖a.js，用户在这个时间间隙访问，会得到新的index.html配合旧的a.js的情况，从而出现错误的页面。</li><li>如果先覆盖a.js，后覆盖index.html，用户在这个间隙访问，会得到旧的index.html配合新的a.js的情况，从而也出现了错误的页面。</li></ol><p>这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。</p><p>对于静态资源缓存更新的问题，目前来说最优方案就是 <code>基于文件内容的hash版本冗余机制</code> 了。也就是说，我们希望项目源码是这么写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;a.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>发布后代码变成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;a_8244e91.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>也就是a.js发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中”_82244e91”这串字符是根据a.js的文件内容进行hash运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有hash的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：</p><ol><li>上线的a.js不是同名文件覆盖，而是文件名+hash的冗余，所以可以先上线静态资源，再上线html页面，不存在间隙问题；</li><li>遇到问题回滚版本的时候，无需回滚a.js，只须回滚页面即可；</li><li>由于静态资源版本号是文件内容的hash，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；</li></ol><blockquote><p>以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。</p></blockquote><p>虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。</p><p>用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：</p><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/md5.png" alt="md5计算过程"></p><p>由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，index.html中引用的a.css文件的内容其实也包含了a.png的hash运算结果，因此我们在修改index.html中a.css的引用时，不能直接计算a.css的内容hash，而是要先计算出a.png的内容hash，替换a.css中的引用，得到了a.css的最终内容，再做hash运算，最后替换index.html中的引用。</p><blockquote><p>计算index.html中引用的a.css文件的url过程：</p><ol><li>压缩a.png后计算其内容的md5值</li><li>将a.png的md5写入a.css，再压缩a.css，计算其内容的md5值</li><li>将a.css的md5值写入到index.html中</li></ol></blockquote><p>grunt等task-based的工具是很难在task之间协作处理这样的需求的。</p><p>在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！</p><h2 id="静态资源管理与模块化框架"><a href="#静态资源管理与模块化框架" class="headerlink" title="静态资源管理与模块化框架"></a>静态资源管理与模块化框架</h2><p>解决了静态资源缓存问题之后，让我们再来看看前面的优化原则表还剩些什么：</p><ul><li>优化方向    优化手段</li><li>请求数量    合并脚本和样式表，拆分初始化负载</li><li>请求带宽    移除重复脚本</li><li>缓存利用    使Ajax可缓存</li><li>页面结构    将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</li></ul><blockquote><p>很不幸，剩下的优化原则都不是使用工具就能很好实现的。或许有人会辩驳：“我用某某工具可以实现脚本和样式表合并”。嗯，必须承认，使用工具进行资源合并并替换引用或许是一个不错的办法，但在大型web应用，这种方式有一些非常严重的缺陷，来看一个很熟悉的例子 ：</p></blockquote><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/day0.png" alt="第一天"></p><p>某个web产品页面有A、B、C三个资源</p><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/day1.png" alt="第二天"></p><p>工程师根据“减少HTTP请求”的优化原则合并了资源</p><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/day2.png" alt="第三天"></p><p>产品经理要求C模块按需出现，此时C资源已出现多余的可能</p><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/day3.png" alt="第四天"></p><p>C模块不再需要了，注释掉吧！代码1秒钟搞定，但C资源通常不敢轻易剔除</p><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/day4.png?v" alt="后来"></p><p>不知不觉中，性能优化变成了性能恶化……</p><blockquote><p>这个例子来自 <a href="http://velocity.oreilly.com.cn/2010/index.php?func=session&name=%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E8%B5%84%E6%BA%90%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">Facebook静态网页资源的管理和优化@Velocity China 2010</a></p></blockquote><p>事实上，使用工具在线下进行静态资源合并是无法解决资源按需加载的问题的。如果解决不了按需加载，则必会导致资源的冗余；此外，线下通过工具实现的资源合并通常会使得资源加载和使用的分离，比如在页面头部或配置文件中写资源引用及合并信息，而用到这些资源的html组件写在了页面其他地方，这种书写方式在工程上非常容易引起维护不同步的问题，导致使用资源的代码删除了，引用资源的代码却还在的情况。因此，在工业上要实现资源合并至少要满足如下需求：</p><ol><li>确实能减少HTTP请求，这是基本要求（合并）</li><li>在使用资源的地方引用资源（就近依赖），不使用不加载（按需）</li><li>虽然资源引用不是集中书写的，但资源引用的代码最终还能出现在页面头部（css）或尾部（js）</li><li>能够避免重复加载资源（去重）</li></ol><p>将以上要求综合考虑，不难发现，单纯依靠前端技术或者工具处理是很难达到这些理想要求的。</p><p>接下来我会讲述一种新的模板架构设计，用以实现前面说到那些性能优化原则，同时满足工程开发和维护的需要，这种架构设计的核心思想就是：</p><blockquote><p>基于依赖关系表的静态资源管理系统与模块化框架设计</p></blockquote><p>考虑一段这样的页面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;a.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;b.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;c.css&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>根据资源合并需求中的第二项，我们希望资源引用与使用能尽量靠近，这样将来维护起来会更容易一些，因此，理想的源码是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;a.css&quot;/&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;b.css&quot;/&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;c.css&quot;/&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>当然，把这样的页面直接送达给浏览器用户是会有严重的页面闪烁问题的，所以我们实际上仍然希望最终页面输出的结果还是如最开始的截图一样，将css放在头部输出。这就意味着，页面结构需要有一些调整，并且有能力收集资源加载需求，那么我们考虑一下这样的源码（以php为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;!--[ CSS LINKS PLACEHOLDER ]--&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;?php require_static(&apos;a.css&apos;); ?&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php require_static(&apos;b.css&apos;); ?&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php require_static(&apos;c.css&apos;); ?&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在页面的头部插入一个html注释 <code>&lt;!--[CSS LINKS PLACEHOLDER]--&gt;</code> 作为占位，而将原来字面书写的资源引用改成模板接口 <code>require_static</code> 调用，该接口负责收集页面所需资源。</p><p>require_static接口实现非常简单，就是准备一个数组，收集资源引用，并且可以去重。最后在页面输出的前一刻，我们将require_static在运行时收集到的 <code>a.css</code>、<code>b.css</code>、<code>c.css</code> 三个资源拼接成html标签，替换掉注释占位 <code>&lt;!--[CSS LINKS PLACEHOLDER]--&gt;</code>，从而得到我们需要的页面结构。</p><p>经过实践总结，可以发现模板层面只要实现三个开发接口，就可以比较完美的实现目前遗留的大部分性能优化原则，这三个接口分别是：</p><ol><li>require_static(res_id)：收集资源加载需求的接口，参数是静态资源id。</li><li>load_widget(wiget_id)：加载拆分成小组件模板的接口。你可以叫它为widget、component或者pagelet之类的。总之，我们需要一个接口把一个大的页面模板拆分成一个个的小部分来维护，最后在原来的页面中以组件为单位来加载这些小部件。</li><li>script(code)：收集写在模板中的js脚本，使之出现的页面底部，从而实现性能优化原则中的 <code>将js放在页面底部</code> 原则。</li></ol><p>实现了这些接口之后，一个重构后的模板页面的源代码可能看起来就是这样的了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;?php require_static(&apos;jquery.js&apos;); ?&gt;</span><br><span class="line">    &lt;?php require_static(&apos;bootstrap.css&apos;); ?&gt;</span><br><span class="line">    &lt;?php require_static(&apos;bootstrap.js&apos;); ?&gt;</span><br><span class="line">    &lt;!--[ CSS LINKS PLACEHOLDER ]--&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;?php load_widget(&apos;a&apos;); ?&gt;</span><br><span class="line">    &lt;?php load_widget(&apos;b&apos;); ?&gt;</span><br><span class="line">    &lt;?php load_widget(&apos;c&apos;); ?&gt;</span><br><span class="line">    &lt;!--[ SCRIPTS PLACEHOLDER ]--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>而最终在模板解析的过程中，资源收集与去重、页面script收集、占位符替换操作，最终从服务端发送出来的html代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;bootstrap.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;a.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;b.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;c.css&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;a.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;b.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;c.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>不难看出，我们目前已经实现了 <code>按需加载</code>，<code>将脚本放在底部</code>，<code>将样式表放在头部</code> 三项优化原则。</p><p>前面讲到静态资源在上线后需要添加hash戳作为版本标识，那么这种使用模板语言来收集的静态资源该如何实现这项功能呢？</p><blockquote><p>答案是：静态资源依赖关系表。</p></blockquote><p>考虑这样的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">    ├── widget</span><br><span class="line">    │   ├── a</span><br><span class="line">    │   │   ├── a.css</span><br><span class="line">    │   │   ├── a.js</span><br><span class="line">    │   │   └── a.php</span><br><span class="line">    │   ├── b</span><br><span class="line">    │   │   ├── b.css</span><br><span class="line">    │   │   ├── b.js</span><br><span class="line">    │   │   └── b.php</span><br><span class="line">    │   └── c</span><br><span class="line">    │       ├── c.css</span><br><span class="line">    │       ├── c.js</span><br><span class="line">    │       └── c.php</span><br><span class="line">    ├── bootstrap.css</span><br><span class="line">    ├── bootstrap.js</span><br><span class="line">    ├── index.php</span><br><span class="line">    └── jquery.js</span><br></pre></td></tr></table></figure><p>如果我们可以使用工具扫描整个project目录，然后创建一张资源表，同时记录每个资源的部署路径，得到这样的一张表：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"res"</span> : &#123;</span><br><span class="line">        <span class="attr">"widget/a/a.css"</span> : <span class="string">"/widget/a/a_1688c82.css"</span>,</span><br><span class="line">        <span class="attr">"widget/a/a.js"</span>  : <span class="string">"/widget/a/a_ac3123s.js"</span>,</span><br><span class="line">        <span class="attr">"widget/b/b.css"</span> : <span class="string">"/widget/b/b_52923ed.css"</span>,</span><br><span class="line">        <span class="attr">"widget/b/b.js"</span>  : <span class="string">"/widget/b/b_a5cd123.js"</span>,</span><br><span class="line">        <span class="attr">"widget/c/c.css"</span> : <span class="string">"/widget/c/c_03cab13.css"</span>,</span><br><span class="line">        <span class="attr">"widget/c/c.js"</span>  : <span class="string">"/widget/c/c_bf0ae3f.js"</span>,</span><br><span class="line">        <span class="attr">"jquery.js"</span>      : <span class="string">"/jquery_9151577.js"</span>,</span><br><span class="line">        <span class="attr">"bootstrap.css"</span>  : <span class="string">"/bootstrap_f5ba12d.css"</span>,</span><br><span class="line">        <span class="attr">"bootstrap.js"</span>   : <span class="string">"/bootstrap_a0b3ef9.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"pkg"</span> : &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于这张表，我们就很容易实现 <code>require_static(file_id)</code>，<code>load_widget(widget_id)</code> 这两个模板接口了。以load_widget为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function load_widget($id)&#123;</span><br><span class="line">    //从json文件中读取资源表</span><br><span class="line">    $map = load_map();</span><br><span class="line">    //查找静态资源</span><br><span class="line">    $filename = &apos;widget/&apos; . $id . &apos;/&apos; . $id;</span><br><span class="line">    //查找js文件</span><br><span class="line">    $js = $filename . &apos;.js&apos;;</span><br><span class="line">    if(isset($map[&apos;res&apos;][$js])) &#123;</span><br><span class="line">        //如果有对应的js资源，就收集起来</span><br><span class="line">        collect_js_static($map[&apos;res&apos;][$js]);</span><br><span class="line">    &#125;</span><br><span class="line">    //查找css文件</span><br><span class="line">    $css = $filename . &apos;.css&apos;;</span><br><span class="line">    if(isset($map[&apos;res&apos;][$css])) &#123;</span><br><span class="line">        //如果有对应的css资源，就收集起来</span><br><span class="line">        collect_css_static($map[&apos;res&apos;][$css]);</span><br><span class="line">    &#125;</span><br><span class="line">    include $filename . &apos;.php&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用查表来解决md5戳的问题，这样，我们的页面最终送达给用户的结果就是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/bootstrap_f5ba12d.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/widget/a/a_1688c82.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/widget/b/b_52923ed.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/widget/c/c_03cab13.css&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/jquery_9151577.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/bootstrap_a0b3ef9.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/widget/a/a_ac3123s.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/widget/b/b_a5cd123.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/widget/c/c_bf0ae3f.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来，我们讨论基于表的设计思想上是如何实现静态资源合并的。或许有些团队使用过combo服务，也就是我们在最终拼接生成页面资源引用的时候，并不是生成多个独立的link标签，而是将资源地址拼接成一个url路径，请求一种线上的动态资源合并服务，从而实现减少HTTP请求的需求，比如前面的例子，稍作调整即可得到这样的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/??bootstrap_f5ba12d.css,widget/a/a_1688c82.css,widget/b/b_52923ed.css,widget/c/c_03cab13.css&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/??jquery_9151577.js,bootstrap_a0b3ef9.js,widget/a/a_ac3123s.js,widget/b/b_a5cd123.js,widget/c/c_bf0ae3f.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这个 <code>/??file1,file2,file3,…</code> 的url请求响应就是动态combo服务提供的，它的原理很简单，就是根据url找到对应的多个文件，合并成一个文件来响应请求，并将其缓存，以加快访问速度。</p><p>这种方法很巧妙，有些服务器甚至直接集成了这类模块来方便的开启此项服务，这种做法也是大多数大型web应用的资源合并做法。但它也存在一些缺陷：</p><ol><li>浏览器有url长度限制，因此不能无限制的合并资源。</li><li>如果用户在网站内有公共资源的两个页面间跳转访问，由于两个页面的combo的url不一样导致用户不能利用浏览器缓存来加快对公共资源的访问速度。</li><li>如果combo的url中任何一个文件发生改变，都会导致整个url缓存失效，从而导致浏览器缓存利用率降低。</li></ol><p>对于上述第二条缺陷，可以举个例子来看说明：</p><ul><li><p>假设网站有两个页面A和B</p></li><li><p>A页面使用了a，b，c，d四个资源</p></li><li><p>B页面使用了a，b，e，f四个资源</p></li><li><p>如果使用combo服务，我们会得：</p><ul><li>A页面的资源引用为：/??<code>a,b,c,d</code></li><li>B页面的资源引用为：/??<code>a,b,e,f</code></li></ul></li><li><p>两个页面引用的资源是不同的url，因此浏览器会请求两个合并后的资源文件，跨页面访问没能很好的利用a、b这两个资源的缓存。</p></li></ul><p>很明显，如果combo服务能聪明的知道A页面使用的资源引用为 /??<code>a,b</code> 和 /??<code>c,d</code>，而B页面使用的资源引用为 /??<code>a,b</code> 和 /??<code>e,f</code>就好了。这样当用户在访问A页面之后再访问B页面时，只需要下载B页面的第二个combo文件即可，第一个文件已经在访问A页面时缓存好了的。</p><p>基于这样的思考，我们在资源表上新增了一个字段，取名为 <code>pkg</code>，就是资源合并生成的新资源，表的结构会变成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"res"</span> : &#123;</span><br><span class="line">        <span class="attr">"widget/a/a.css"</span> : <span class="string">"/widget/a/a_1688c82.css"</span>,</span><br><span class="line">        <span class="attr">"widget/a/a.js"</span>  : <span class="string">"/widget/a/a_ac3123s.js"</span>,</span><br><span class="line">        <span class="attr">"widget/b/b.css"</span> : <span class="string">"/widget/b/b_52923ed.css"</span>,</span><br><span class="line">        <span class="attr">"widget/b/b.js"</span>  : <span class="string">"/widget/b/b_a5cd123.js"</span>,</span><br><span class="line">        <span class="attr">"widget/c/c.css"</span> : <span class="string">"/widget/c/c_03cab13.css"</span>,</span><br><span class="line">        <span class="attr">"widget/c/c.js"</span>  : <span class="string">"/widget/c/c_bf0ae3f.js"</span>,</span><br><span class="line">        <span class="attr">"jquery.js"</span>      : <span class="string">"/jquery_9151577.js"</span>,</span><br><span class="line">        <span class="attr">"bootstrap.css"</span>  : <span class="string">"/bootstrap_f5ba12d.css"</span>,</span><br><span class="line">        <span class="attr">"bootstrap.js"</span>   : <span class="string">"/bootstrap_a0b3ef9.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"pkg"</span> : &#123;</span><br><span class="line">        <span class="attr">"p0"</span> : &#123;</span><br><span class="line">            <span class="attr">"url"</span> : <span class="string">"/pkg/lib_cef213d.js"</span>,</span><br><span class="line">            <span class="attr">"has"</span> : [ <span class="string">"jquery.js"</span>, <span class="string">"bootstrap.js"</span> ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"p1"</span> : &#123;</span><br><span class="line">            <span class="attr">"url"</span> : <span class="string">"/pkg/lib_afec33f.css"</span>,</span><br><span class="line">            <span class="attr">"has"</span> : [ <span class="string">"bootstrap.css"</span> ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"p2"</span> : &#123;</span><br><span class="line">            <span class="attr">"url"</span> : <span class="string">"/pkg/widgets_22feac1.js"</span>,</span><br><span class="line">            <span class="attr">"has"</span> : [</span><br><span class="line">                <span class="string">"widget/a/a.js"</span>,</span><br><span class="line">                <span class="string">"widget/b/b.js"</span>,</span><br><span class="line">                <span class="string">"widget/c/c.js"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"p3"</span> : &#123;</span><br><span class="line">            <span class="attr">"url"</span> : <span class="string">"/pkg/widgets_af23ce5.css"</span>,</span><br><span class="line">            <span class="attr">"has"</span> : [</span><br><span class="line">                <span class="string">"widget/a/a.css"</span>,</span><br><span class="line">                <span class="string">"widget/b/b.css"</span>,</span><br><span class="line">                <span class="string">"widget/c/c.css"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比之前的表，可以看到新表中多了一个pkg字段，并且记录了打包后的文件所包含的独立资源。这样，我们重新设计一下 require_static、load_widget 这两个模板接口，实现这样的逻辑：</p><blockquote><p>在查表的时候，如果一个静态资源有pkg字段，那么就去加载pkg字段所指向的打包文件，否则加载资源本身。</p></blockquote><p>比如执行<code>require_static(&#39;bootstrap.js&#39;)</code>，查表得知bootstrap.js被打包在了<code>p1</code>中，因此取出p1包的url <code>/pkg/lib_cef213d.js</code>，并且记录页面已加载了 <code>jquery.js</code> 和 <code>bootstrap.js</code> 两个资源。这样一来，之前的模板代码执行之后得到的html就变成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/pkg/lib_afec33f.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/pkg/widgets_af23ce5.css&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/pkg/lib_cef213d.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/pkg/widgets_22feac1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>虽然这种策略请求有4个，不如combo形式的请求少，但可能在统计上是性能更好的方案。由于两个lib打包的文件修改的可能性很小，因此这两个请求的缓存利用率会非常高，每次项目发布后，用户需要重新下载的静态资源可能要比combo请求节省很多带宽。</p><blockquote><p>性能优化既是一个工程问题，又是一个统计问题。优化性能时如果只关注一个页面的首次加载是很片面的。还应该考虑全站页面间跳转、项目迭代后更新资源等情况下的优化策略。</p></blockquote><p>此时，我们又引入了一个新的问题：如何决定哪些文件被打包？</p><p>从经验来看，项目初期可以采用人工配置的方式来指定打包情况，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pack"</span> : &#123;</span><br><span class="line">        <span class="attr">"lib.js"</span>      : [ <span class="string">"jquery.js"</span>, <span class="string">"bootstrap.js"</span> ],</span><br><span class="line">        <span class="attr">"lib.css"</span>     : <span class="string">"bootstrap.css"</span>,</span><br><span class="line">        <span class="attr">"widgets.js"</span>  : <span class="string">"widget/**.js"</span>,</span><br><span class="line">        <span class="attr">"widgets.css"</span> : <span class="string">"widget/**.css"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但随着系统规模的增大，人工配置会带来非常高的维护成本，此时需要一个辅助系统，通过分析线上访问日志和静态资源组合加载情况来自动生成这份配置文件，系统设计如图：</p><p><img src="https://raw.githubusercontent.com/fouber/blog/master/assets/log.png" alt="静态资源分析系统"></p><p>至此，我们通过基于表的静态资源管理系统和三个模板接口实现了几个重要的性能优化原则，现在我们再来回顾一下前面的性能优化原则分类表，剔除掉已经做到了的，看看还剩下哪些没做到的：</p><p>优化方向    优化手段<br>请求数量    拆分初始化负载<br>缓存利用    使Ajax可缓存<br>页面结构    尽早刷新文档的输出<br><code>拆分初始化负载</code> 的目标是将页面一开始加载时不需要执行的资源从所有资源中分离出来，等到需要的时候再加载。工程师通常没有耐心去区分资源的分类情况，但我们可以利用组件化框架接口来帮助工程师管理资源的使用。还是从例子开始思考，如果我们有一个js文件是用户交互后才需要加载的，会怎样呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;?php require_static(&apos;jquery.js&apos;); ?&gt;</span><br><span class="line">    &lt;?php require_static(&apos;bootstrap.css&apos;); ?&gt;</span><br><span class="line">    &lt;?php require_static(&apos;bootstrap.js&apos;); ?&gt;</span><br><span class="line">    &lt;!--[ CSS LINKS PLACEHOLDER ]--&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;?php load_widget(&apos;a&apos;); ?&gt;</span><br><span class="line">    &lt;?php load_widget(&apos;b&apos;); ?&gt;</span><br><span class="line">    &lt;?php load_widget(&apos;c&apos;); ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php script(&apos;start&apos;); ?&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document.body).click(function()&#123;</span><br><span class="line">            require.async(&apos;dialog.js&apos;, function(dialog)&#123;</span><br><span class="line">                dialog.show(&apos;you catch me!&apos;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;?php script(&apos;end&apos;); ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--[ SCRIPTS PLACEHOLDER ]--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>很明显，<code>dialog.js</code> 这个文件我们不需要在初始化的时候就加载，因此它应该在后续的交互中再加载，但文件都加了md5戳，我们如何能在浏览器环境中知道加载的url呢？</p><blockquote><p>答案就是：把静态资源表的一部分输出在页面上，供前端模块化框架加载静态资源。</p></blockquote><p>我就不多解释代码的执行过程了，大家看到完整的html输出就能理解是怎么回事了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;page&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/pkg/lib_afec33f.css&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/pkg/widgets_af23ce5.css&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt; content of module a &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module b &lt;/div&gt;</span><br><span class="line">    &lt;div&gt; content of module c &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/pkg/lib_cef213d.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/pkg/widgets_22feac1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //将静态资源表输出在前端页面中</span><br><span class="line">        require.config(&#123;</span><br><span class="line">            res : &#123;</span><br><span class="line">                &apos;dialog.js&apos; : &apos;/dialog_fa3df03.js&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document.body).click(function()&#123;</span><br><span class="line">            //require.async接口查表确定加载资源的url</span><br><span class="line">            require.async(&apos;dialog.js&apos;, function(dialog)&#123;</span><br><span class="line">                dialog.show(&apos;you catch me!&apos;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>dialog.js不会在页面以script src的形式输出，而是变成了资源注册，这样，当页面点击触发require.async执行的时候，async函数才会查表找到资源的url并加载它，加载完毕后触发回调函数。</p><p>到目前为止，我们又以架构的形式实现了一项优化原则（拆分初始化负载），回顾我们的优化分类表，现在仅有两项没能做到了：</p><p>优化方向    优化手段<br>缓存利用    使Ajax可缓存<br>页面结构    尽早刷新文档的输出<br>剩下的两项优化原则要做到并不容易，真正可缓存的Ajax在现实开发中比较少见，而 <code>尽早刷新文档的输出</code> 原则facebook在2010年的velocity上 <a href="http://velocity.oreilly.com.cn/2010/index.php?func=session&name=Facebook%E7%BD%91%E7%AB%99%E7%9A%84Ajax%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF" target="_blank" rel="noopener">提到过</a>，就是BigPipe技术。当时facebook团队还讲到了Quickling和PageCache两项技术，其中的PageCache算是比较彻底的实现Ajax可缓存的优化原则了。<br>Reference: <a href="https://github.com/fouber/blog/issues/3" target="_blank" rel="noopener">前端工程与性能优化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每个参与过开发企业级web应用的前端工程师或许都曾思考过前端性能优化方面的问题。我们有雅虎14条性能优化原则，还有两本很经典的性能优化指导书：《高性能网站建设指南》、《高性能网站建设进阶指南》。经验丰富的工程师对于前端性能优化方法耳濡目染，基本都能一一列举出来。这些性能优化原则大概是在7年前提出的，对于web性能优化至今都有非常重要的指导意义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fouber/blog/master/assets/book.jpg&quot; alt=&quot;高性能网站建设指南&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://xukuanzhuo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端工程" scheme="https://xukuanzhuo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="前端性能优化" scheme="https://xukuanzhuo.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的LHS和RHS查询</title>
    <link href="https://xukuanzhuo.github.io/2016/06/19/2016-06-19-JavaScript-LHS-RHS/"/>
    <id>https://xukuanzhuo.github.io/2016/06/19/2016-06-19-JavaScript-LHS-RHS/</id>
    <published>2016-06-19T13:06:26.000Z</published>
    <updated>2019-06-08T14:15:46.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><p>程序中的源代码在执行之前会经历三个步骤:</p><blockquote><p>1、分词/词法分析；</p><p>2、解析/语法分析(此步骤包含AST)；</p><p>3、代码生成；</p></blockquote><a id="more"></a><h3 id="LHS-和-RHS"><a href="#LHS-和-RHS" class="headerlink" title="LHS 和 RHS"></a>LHS 和 RHS</h3><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = 2</span><br></pre></td></tr></table></figure><p>编译器会做如下处理:</p><ul><li><p>1、<code>var a</code>编译器会询问作用域是否已经存在该名称的变量，如果存在，编译器会忽略该声明，否则在当前作用域中声明一个新的变量，命名为<code>a</code>。</p></li><li><p>2、<code>a = 2</code>赋值操作，会询问当前作用域是否存在<code>a</code>变量，如果存在使用当前变量进行赋值操作。</p></li></ul><p>我们的例子中，引擎会为变量<code>a</code>进行<code>LHS</code>查询，另一个查找类型叫做<code>RHS</code>。</p><blockquote><h5 id="LHS和RHS的含义是‘赋值操作的左侧或右侧’，并不意味着就是-赋值操作符的左侧或右侧，赋值操作还有其他几种形式。概念上最好理解为“赋值操作的目标是谁-LHS-”-以及-“谁是赋值操作的源头-RHS-”。"><a href="#LHS和RHS的含义是‘赋值操作的左侧或右侧’，并不意味着就是-赋值操作符的左侧或右侧，赋值操作还有其他几种形式。概念上最好理解为“赋值操作的目标是谁-LHS-”-以及-“谁是赋值操作的源头-RHS-”。" class="headerlink" title="LHS和RHS的含义是‘赋值操作的左侧或右侧’，并不意味着就是 = 赋值操作符的左侧或右侧，赋值操作还有其他几种形式。概念上最好理解为“赋值操作的目标是谁(LHS)” 以及 “谁是赋值操作的源头(RHS)”。"></a><code>LHS</code>和<code>RHS</code>的含义是‘赋值操作的左侧或右侧’，并不意味着就是 <code>=</code> 赋值操作符的左侧或右侧，赋值操作还有其他几种形式。概念上最好理解为“赋值操作的目标是谁(LHS)” 以及 “谁是赋值操作的源头(RHS)”。</h5></blockquote><h3 id="为什么区分LHS和RHS很重要"><a href="#为什么区分LHS和RHS很重要" class="headerlink" title="为什么区分LHS和RHS很重要"></a>为什么区分LHS和RHS很重要</h3><p>考虑以下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function foo (a) &#123;</span><br><span class="line">  console.log(a);</span><br><span class="line">  b =a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(a);</span><br></pre></td></tr></table></figure><blockquote><p>第一次对<code>b</code>进行<code>RHS</code>查询时是无法找到该变量的，这是一个“未声明”的变量。如果<code>RHS</code>在所嵌套的作用域中找不到该变量，就会抛出<code>ReferenceError</code> 异常，</p><p>当引擎进行<code>LHS</code>查询时，如果在嵌套的作用域中直至全局作用域中也无法找到目标变量，如果不是严格模式下，就会在全局作用域中创建一个该名称的变量。</p></blockquote><blockquote><p>LHS和RHS 顺序影响理解 <code>变量提示</code>、<code>作用域</code>、<code>This</code> 等</p></blockquote><hr><blockquote><p>Reference: <a href="https://github.com/xukuanzhuo/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch1.md" target="_blank" rel="noopener">You Don’t Know JS: Scope &amp; Closures</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;编译原理&quot;&gt;&lt;a href=&quot;#编译原理&quot; class=&quot;headerlink&quot; title=&quot;编译原理&quot;&gt;&lt;/a&gt;编译原理&lt;/h3&gt;&lt;p&gt;程序中的源代码在执行之前会经历三个步骤:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、分词/词法分析；&lt;/p&gt;
&lt;p&gt;2、解析/语法分析(此步骤包含AST)；&lt;/p&gt;
&lt;p&gt;3、代码生成；&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://xukuanzhuo.github.io/tags/javascript/"/>
    
      <category term="读书笔记" scheme="https://xukuanzhuo.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
